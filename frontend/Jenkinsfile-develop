
    podTemplate(label: "python-develop-maven-${env.BUILD_NUMBER}", name: "python-develop-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
    ) {
    
    node("python-develop-maven-${env.BUILD_NUMBER}") {

    stage('Code Quality Check') {
        checkout scm
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_URL: ${SONARQUBE_URL}"
        dir('frontend/sonar-runner') {
          sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        }
    }

    stage('Build') {
        echo "Building..."
	openshiftBuild bldCfg: 'client-develop-angular-app-build', showBuildLogs: 'true'
        openshiftBuild bldCfg: 'client-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH = sh (
            script: 'oc get istag client-develop:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH: $IMAGE_HASH"
    }

    stage('Deploy on Dev') {
        echo "Deploying to dev..."
        openshiftTag destStream: 'client-develop', verbose: 'true', destTag: 'dev', srcStream: 'client-develop', srcTag: "${IMAGE_HASH}"
        sh 'sleep 10s'
	openshiftVerifyDeployment depCfg: 'client', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false'
    }

}

}

stage('FT on Dev') {
    podTemplate(label: "bddstack-develop-${env.BUILD_NUMBER}", name: "bddstack-develop-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'docker-registry.default.svc:5000/jenkins-slave-bddstack',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
    ) {
    node("bddstack-develop-${env.BUILD_NUMBER}") {

        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        dir('functional-tests') {
	    try {   
                echo ">> FT_LOG_LEVEL=${FT_LOG_LEVEL}"
                sh './gradlew --debug --stacktrace chromeHeadlessTest'
	    } finally {
		archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'build/test-results/**/*'
                junit 'build/test-results/**/*.xml'
                publishHTML (target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/spock',
                            reportFiles: 'index.html',
                            reportName: "BDD Spock Report"
                        ])
                publishHTML (target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/chromeHeadlessTest',
                            reportFiles: 'index.html',
                            reportName: "Full Test Report"
                        ])        
	    } //end of finally
        } //end of dir
    } //end of node
    } //end of podTemplate 
} //end of stage
