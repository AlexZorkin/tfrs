node('maven') {

    stage('Code Quality Check') {
        checkout scm
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_URL: ${SONARQUBE_URL}"
        dir('frontend/sonar-runner') {
          sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        }
    }

    stage('Build') {
        echo "Building..."
	openshiftBuild bldCfg: 'client-angular-app-build', showBuildLogs: 'true'
        openshiftBuild bldCfg: 'client', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH = sh (
            script: 'oc get istag client:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH: $IMAGE_HASH"
    }

    stage('Deploy on Test') {
        echo "Deploying to Test..."
        openshiftTag destStream: 'client', verbose: 'true', destTag: 'test', srcStream: 'client', srcTag: "${IMAGE_HASH}"
        openshiftVerifyDeployment depCfg: 'client', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
    }
	
    stage('Deploy on Prod') {
	 input "Deploy to Prod?"
        echo "Deploying to Prod..."
        openshiftTag destStream: 'client', verbose: 'true', destTag: 'prod', srcStream: 'client', srcTag: "${IMAGE_HASH}"
        openshiftVerifyDeployment depCfg: 'client', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
    }	

}
