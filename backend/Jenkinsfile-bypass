def result = 0;

stage('Unit Test') {
    podTemplate(label: "develop-backendbypass-python-${env.BUILD_NUMBER}", name: "develop-backendbypass-python-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'docker-registry.default.svc:5000/openshift/jenkins-slave-python-rhel7',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
    ){
        node("develop-backendbypass-python-${env.BUILD_NUMBER}") {
            
            checkout scm
            dir('backend') {
                try {
                    sh 'pip install --upgrade pip && pip install -r requirements.txt'
                    sh 'python manage.py collectstatic && python manage.py migrate'
                    sh 'python manage.py test -c nose.cfg'
                } catch(Throwable t) {
                    result = 1;
                    mail (from: "${EMAIL_FROM}", to: "${EMAIL_TO}", subject: "FYI: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) unit test failed", body: "See ${env.BUILD_URL} for details. ");
                } finally {
                    stash includes: 'nosetests.xml,coverage.xml', name: 'coverage'
                    junit 'nosetests.xml'
                }
            }
            
        } //end node
    } //end podTemplate
} //end of stage
        
echo "result is ${result}"
if (result != 0) {
    echo "[FAILURE] Unit Test stage failed"
    currentBuild.result = 'FAILURE'
    return
}
        
podTemplate(label: "develop-backendbypass-maven-${env.BUILD_NUMBER}", name: "develop-backend-maven-${env.BUILD_NUMBER}", serviceAccount: 'jenkins', cloud: 'openshift',
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
                resourceRequestCpu: '500m',
                resourceLimitCpu: '1000m',
                resourceRequestMemory: '2Gi',
                resourceLimitMemory: '4Gi',
                workingDir: '/home/jenkins',
                command: '',
                args: '${computer.jnlpmac} ${computer.name}'
            )
        ]
) {       
node("develop-backendbypass-maven-${env.BUILD_NUMBER}") {

    stage('Build') {
        openshiftBuild bldCfg: 'tfrs-bypass', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH = sh (
            script: 'oc get istag tfrs-bypass:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH: $IMAGE_HASH"
    }

    stage('Deploy on Dev') {
        echo "Deploying to Dev: ${BUILD_ID}"
        openshiftTag destStream: 'tfrs-bypass', verbose: 'true', destTag: 'dev', srcStream: 'tfrs-bypass', srcTag: "${IMAGE_HASH}"
        openshiftVerifyDeployment depCfg: 'tfrs-bypass', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false'
    }

}
}
