node('python') {
    stage('Unit Test') {
        checkout scm
        def result = 0;
        try {
            sh 'cd backend && pip install --upgrade pip && pip install -r requirements.txt'
            sh 'cd backend && coverage erase && coverage run --source=. manage.py test && coverage html && coverage xml'
        } catch(Throwable t) {
            result = 1;
            mail (from: "${EMAIL_FROM}", to: "${EMAIL_TO}", subject: "FYI: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) unit test failed", body: "See ${env.BUILD_URL} for details. ");
        } finally {
            def htmlcovFolder = new File( 'backend/htmlcov' )
            if(htmlcovFolder.exists()) {
                def indexhtmlFile = new File('backend/htmlcov/index.html')
                if(indexhtmlFile.exists()) {
                    publishHTML (target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'backend/htmlcov',
                        reportFiles: 'index.html',
                        reportName: "Unit Test Code Coverage Report" ])
                }
            }
        }
    }
    if (result != 0) {
        echo '[FAILURE] Unit Test stage failed'
        currentBuild.result = 'FAILURE'
        return
    }
}

node('maven') {

    stage('Quality Check') {
        checkout scm
        echo('Quality Check')
        SONARQUBE_PWD = sh (
            script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_PWD: ${SONARQUBE_PWD}"

        SONARQUBE_URL = sh (
            script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
            returnStdout: true
        ).trim()
        echo ">> SONARQUBE_URL: ${SONARQUBE_URL}"

        dir('backend/sonar-runner') {
            sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        }
    }

    stage('Build') {
        openshiftBuild bldCfg: 'tfrs-develop', showBuildLogs: 'true'
        echo ">> Getting Image Hash"
        IMAGE_HASH = sh (
            script: 'oc get istag tfrs:latest -o template --template="{{.image.dockerImageReference}}"|awk -F ":" \'{print $3}\'',
 	            returnStdout: true).trim()
        echo ">> IMAGE_HASH: $IMAGE_HASH"
    }

    stage('Deploy to Dev') {
        echo "Deploying to Dev: ${BUILD_ID}"
        openshiftTag destStream: 'tfrs', verbose: 'true', destTag: 'dev', srcStream: 'tfrs', srcTag: "${IMAGE_HASH}"
        openshiftVerifyDeployment depCfg: 'tfrs', namespace: 'mem-tfrs-dev', replicaCount: 1, verbose: 'false'
    }

}

stage('Deploy to Test') {
    input "Deploy to Test?"
    node('master') {
        openshiftTag destStream: 'tfrs', verbose: 'true', destTag: 'test', srcStream: 'tfrs', srcTag: "${IMAGE_HASH}"
        openshiftVerifyDeployment depCfg: 'tfrs', namespace: 'mem-tfrs-test', replicaCount: 1, verbose: 'false'
    }
}

stage('Deploy to Prod') {
    input "Deploy to Prod?"
    node('master') {
        openshiftTag destStream: 'tfrs', verbose: 'true', destTag: 'prod', srcStream: 'tfrs', srcTag: "${IMAGE_HASH}"
        openshiftVerifyDeployment depCfg: 'tfrs', namespace: 'mem-tfrs-prod', replicaCount: 1, verbose: 'false'
    }
}
